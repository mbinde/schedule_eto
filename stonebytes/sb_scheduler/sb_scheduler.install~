<?php

/**
 * Implementation of hook_install().
 */
function sb_scheduler_install() {
  drupal_install_schema('sb_scheduler');

  // Make sure this module loads after date_api.
  db_query("UPDATE {system} SET weight = 1 WHERE name = 'sb_scheduler'");

  // remove comments for the node types we define
  variable_set('comment_sb_schedule', '0');
  variable_set('comment_sb_appointment', '0');

  // remove file uploads from schedule nodes
  variable_set('upload_sb_schedule', '0');

  // don't promote to the front page; initial state is 'published'
  variable_set('node_options_sb_schedule', array('status', ''));
  variable_set('node_options_sb_appointment', array('status', ''));
}


/**
 * Implementation of hook_uninstall().
 */
function sb_scheduler_uninstall() {
  drupal_uninstall_schema('sb_scheduler');
}

/**
 * Implementation of hook_update().
 */
function sb_scheduler_update_6000() {
  $ret = array();
  $ret[] = update_sql("UPDATE {system} SET weight = 1 WHERE name = 'sb_scheduler'");
  return $ret;
}

/**
 * Implementation of hook_schema().
 *
 * sb_schedule_block is the master object, containing the date/time information
 *
 * some objects add additional data to a schedule block:
 *
 * - sb_appointment adds appointment types of fields
 *   - supporting table: sb_appointment_participants
 *
 * - sb_schedule adds fields for a tutor to manage their schedule
 *
 */
function sb_scheduler_schema() {
  $schema['sb_appointment'] = array
    (
     'description' => 'scheduled appointment',
     'fields' => array (
			'appointment_id' => array
			(
			 'type' => 'serial',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 ),
			'title' => array
			(
			 'type' => 'varchar',
			 'length' => 255,
			 ),
			'body' => array
			(
			 'type' => 'text',
			 ),
			'tutor_uid' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 ),
			'rate_override' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			'start_datetime_utc' => array
			(
			 'type' => 'datetime',
			 'not null' => TRUE,
			 ),
			'end_datetime_utc' => array
			(
			 'type' => 'datetime',
			 'not null' => TRUE,
			 ),
			'duration' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 ),
			'repeat_interval' => array
			(
			 'type' => 'varchar',
			 'length' => '5',
			 'default' => 'week',
			 ),
			'repeat_count' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 1,
			 ),
			'appointment_status' => array
			(
			 'type' => 'int',
			 'size' => 'tiny',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 1,
			 ),
			'appointment_type' => array
			(
			 'type' => 'int',
			 'size' => 'tiny',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 1,
			 ),
			),
     'primary key' => array('appointment_id'),
     'indexes' => array
     (
      'idx_status' => array('appointment_status'),
      'idx_schedule_type' => array('appointment_type'),
      'idx_datetime' => array('start_datetime_utc', 'end_datetime_utc'),
      ),
     );
  $schema['sb_appointment_participants'] = array
    (
     'description' => 'uids participating in an appointment',
     'fields' => array (
			'appointment_id' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			'participant_uid' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			),
     'primary key' => array('appointment_id', 'participant_uid'),
     );     
  $schema['sb_appointment_event'] = array
    (
     'description' => 'Individual scheduled event',
     'fields' => array (
			'appointment_event_id' => array
			(
			 'type' => 'serial',
			 'unsigned' => TRUE,
			 'not null' => TRUE
			 ),
			'parent_appointment_id' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			'event_status' => array
			(
			 'type' => 'int',
			 'size' => 'tiny',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 1
			 ),
			'start_datetime_utc' => array
			(
			 'type' => 'datetime',
			 'not null' => TRUE,
			 ),
			'end_datetime_utc' => array
			(
			 'type' => 'datetime',
			 'not null' => TRUE,
			 ),
			),
     'primary key' => array('appointment_event_id'),
     'indexes' => array
     (
      'idx_parent' => array('parent_appointment_id'),
      'idx_status' => array('event_status'),
      'idx_start_date' => array('start_datetime_utc'),
      'idx_end_date' => array('end_datetime_utc'),
      ),
     );

  $schema['sb_schedule'] = array 
    (
     'description' => 'scheduled time node',
     'fields' => array (
			'nid' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			'vid' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			'owner_uid' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			'rate_override' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			),
     'primary key' => array('nid', 'vid'),
     'indexes' => array
     (
      'idx_owner_uid' => array('owner_uid'),
      ),
     );

  $schema['sb_schedule_block'] = array
    (
     'description' => 'Scheduled time description',
     'fields' => array (
			'schedule_block_id' => array
			(
			 'type' => 'serial',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 ),
			'parent_schedule_nid' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			'block_status' => array
			(
			 'type' => 'int',
			 'size' => 'tiny',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 1,
			 ),
			'schedule_type' => array
			(
			 'type' => 'int',
			 'size' => 'tiny',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 1,
			 ),
			'start_datetime_utc' => array
			(
			 'type' => 'datetime',
			 'not null' => TRUE,
			 ),
			'end_datetime_utc' => array
			(
			 'type' => 'datetime',
			 'not null' => TRUE,
			 ),
			'repeat_interval' => array
			(
			 'type' => 'varchar',
			 'length' => '5',
			 'default' => 'week',
			 ),
			'repeat_count' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 1,
			 ),
			),
     'primary key' => array('schedule_block_id'),
     'indexes' => array
     (
      'idx_status' => array('block_status'),
      'idx_schedule_type' => array('schedule_type'),
      'idx_datetime' => array('start_datetime_utc', 'end_datetime_utc'),
      ),
     );

  $schema['sb_schedule_block_event'] = array
    (
     'description' => 'Individual scheduled event',
     'fields' => array (
			'schedule_block_event_id' => array
			(
			 'type' => 'serial',
			 'unsigned' => TRUE,
			 'not null' => TRUE
			 ),
			'parent_schedule_block_id' => array
			(
			 'type' => 'int',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 0,
			 ),
			'event_status' => array
			(
			 'type' => 'int',
			 'size' => 'tiny',
			 'unsigned' => TRUE,
			 'not null' => TRUE,
			 'default' => 1
			 ),
			'start_datetime_utc' => array
			(
			 'type' => 'datetime',
			 'not null' => TRUE,
			 ),
			'end_datetime_utc' => array
			(
			 'type' => 'datetime',
			 'not null' => TRUE,
			 ),
			),
     'primary key' => array('schedule_block_event_id'),
     'indexes' => array
     (
      'idx_parent' => array('parent_schedule_block_id'),
      'idx_status' => array('event_status'),
      'idx_start_date' => array('start_datetime_utc'),
      'idx_end_date' => array('end_datetime_utc'),
      ),
     );

  return $schema;
}


/**
 * Implementation of hook_requirements().
 */
function sb_scheduler_requirements($phase) {
  $requirements = array();
  $t = get_t();

  // This is the minimum required version for the Date API so that it will 
  // work with this module.
  $required_version = 5.2;

  // Make sure the matching version of date_api is installed.
  // Use info instead of an error at install time since the problem may
  // just be that they were installed in the wrong order.
  switch ($phase) {
    case 'runtime':
      if (variable_get('date_api_version', 0) < $required_version) {
        $requirements['sb_scheduler_api_version'] = array(
          'title' => $t('SB-Scheduler requirements'),
          'value' => $t('The SB-Scheduler module requires a more current version 
             of the Date API. Please check for a newer version.'),
          'severity' => REQUIREMENT_ERROR,
          );
      }
      break;
     case 'install':
      if (variable_get('date_api_version', 0) < $required_version) {
        $requirements['sb_scheduler_api_version'] = array(
          'title' => $t('SB-Scheduler requirements'),
          'value' => $t('The SB-Scheduler module requires the latest version 
             of the Date API, be sure you are installing the latest versions 
             of both modules.'),
          'severity' => REQUIREMENT_INFO,
          );
      }
      break;
  }
  return $requirements;
}
