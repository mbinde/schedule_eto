<?php

function sb_tutor_schedule_type ($arg = "") {
  $types = array ('1' => 'Available Time',
		  '2' => 'Vacation',
		  );
  if (is_numeric($arg)) {
    return $types[$arg];
  } else if ($arg) {
    return array('0' => $arg) + $types;
  } else {
    return $types;
  }
}

/**
 * Implementation of hook_access()
 */
function sb_scheduler_access($op, $node, $account) {
  $is_author = $account->uid == $node->uid;
  switch ($node->$type) {
    /* Schedules */
  case 'sb_schedule':
    switch ($op) {
    case 'create':
      return user_access('create sb schedule', $account);
    case 'update':
      return user_access('edit own sb schedule', $account) && $is_author || user_access('edit any sb schedule', $account);
    case 'delete':
      return user_access('delete own sb schedule', $account) && $is_author || user_access('delete any sb schedule', $account);
    }
    /* Appointments */
  case 'sb_appointment':
    switch ($op) {
    case 'create':
      return user_access('create appointments', $account);
    case 'update':
      return user_access('edit own appointments', $account) && $is_author || user_access('edit any appointments', $account);
    case 'delete':
      return user_access('delete own appointments', $account) && $is_author || user_access('delete any appointments', $account);
    }
  }
}

/**
 * Implementation of hook_perm()
 */
function sb_scheduler_perm() {
  return array(
               'create sb schedule',
               'edit own sb schedule',
               'edit any sb schedule',
               'delete own sb schedule',
               'delete any sb schedule',

               'create appointments',
               'edit own appointments',
               'edit any appointments',
               'delete own appointments',
               'delete any appointments',
               );
}

/**
 * Implementation of hook_node_info()
 *
 * All the node types we provide
 */

function sb_scheduler_node_info() {
  return array(
               'sb_schedule' => array
	       (
		'name' => t('Schedule Available Time'),
		'module' => 'sb_schedule',
		'description' => t('A Schedule'),
		'has_title' => TRUE,
		'title_label' => t('Descriptive title'),
		'has_body' => TRUE,
		'body_label' => t('Notes'),
		'locked' => TRUE,
		),

               'sb_appointment' => array
	       (
		'name' => t('Appointment'),
		'module' => 'sb_appointment',
		'description' => t('An Appointment'),
		'has_title' => TRUE,
		'title_label' => t('Appointment Title'),
		'has_body' => TRUE,
		'body_label' => t('Notes'),
		'locked' => TRUE,
		),

               );
}


/**
 * Implementation of hook_menu()
 */

function sb_scheduler_menu() {

  /**
   * Schedules
   */

  $items['users/%/schedule'] = array (
				      'title callback' => 'user_schedule_callback',
				      'title arguments' => array(1),
				      'page callback' => 'user_schedule_display',
				      'page arguments' => array(1),
				      'type' => MENU_NORMAL_ITEM,
				      'file' => 'schedule.pages.inc',
				      'access arguments' => array('access content'),
				      );

  /**
   * Appointments
   */

  $items['users/%/schedule/appointment/%'] = array (
				      'title callback' => 'user_schedule_appointment_callback',
				      'title arguments' => array(1, 4),
				      'page callback' => 'user_schedule_appointment_display',
				      'page arguments' => array(1, 4),
				      'type' => MENU_NORMAL_ITEM,
				      'file' => 'schedule.pages.inc',
				      'access arguments' => array('access content'),
				      );
  $items['appointments/%/edit'] = array (
					 'title' => 'Edit Appointment',
					 'page callback' => 'user_schedule_appointment_edit',
					 'page arguments' => array(1),
					 'type' => MENU_NORMAL_ITEM,
					 'file' => 'schedule.pages.inc',
					 'access arguments' => array('access content'),
					 );
  
  /**
   * Callbacks
   */

  $items['callback/schedule'] = array (
					 'title' => 'Schedule',
					 'page callback' => 'callback_user_schedule_fetch',
					 'file' => 'schedule.pages.inc',
					 'access arguments' => array('access content'),
					 );
  $items['eto/students/autocomplete'] = array (
					       'page callback' => 'eto_students_autocomplete',
					       'access arguments' => array('access content'),
					       'type' => MENU_CALLBACK,
					       );


  return $items;
}


/*
 * callbacks
 */

function user_schedule_callback($name) {
  $user = user_load(array('name' => $name));
  if ($user) {
    return "Schedule for " . $user->name;
  } else {
    return "";
  }
}

function user_schedule_appointment_callback($name, $arg) {
  $args = _schedule_decode_time_args($arg);

  if ($args['target_date_user']) {
    $title = "Schedule session with " . $name . " on " . date_format($args['target_date_user'], 'M jS, Y') . " at " . date_format($args['target_date_user'], 'g:ia');
  } 
  return $title;

}

function eto_students_autocomplete ($string = '') {
  $matches = array();
  if ($string) {
    $result = db_query_range("SELECT u.name FROM {users} AS u
                                 INNER JOIN users_roles AS ur ON ur.uid = u.uid
                              WHERE 
                                 LOWER(u.name) LIKE LOWER('%s%%')
                                 AND ur.rid = 5", 
			     $string, 0, 10);
    while ($user = db_fetch_object($result)) {
      $matches[$user->name] = check_plain($user->name);
    }
  }
  
  drupal_json($matches);
}

/*****************************************************************************
 *****************************************************************************
 **
 ** sb_schedule functions
 **
 *****************************************************************************
 *****************************************************************************/

function sb_schedule_form(&$node, $form_state) {
  $type = node_get_types('type', $node);

  global $user;

  $form['title'] = array (
			  '#type' => 'hidden',
			  '#value' => ($node->title ? $node->title : "FOOBAR"),
			  );

  $form['owner_uid'] = array (
			      '#type' => 'hidden',
			      '#value' => ($node->owner_uid ? $node->owner_uid : $user->uid),
			      );

  $form['schedule_type'] = array (
				  '#type' => 'hidden',
				  '#value' => ($node->schedule_type ? $node->schedule_type : 1),
				  );
  $form['block_status'] = array (
				  '#type' => 'hidden',
				  '#value' => ($node->schedule_type ? $node->schedule_type : 1),
				  );
  $form['repeat_interval'] = array (
				    '#type' => 'hidden',
				    '#value' => ($node->repeat_interval ? $node->repeat_interval : 'week'),
				    );

  if ($node->uid && ($user->uid != $node->uid)) {
    $timezone_suffix = ($node->tz_owner ? " (timezone: " . $node->tz_owner . ")" : "");
  }
 
  $form['date_field'] = array (
			 '#type' => 'date_popup',
			 '#date_format' => 'm/d/Y',
			 '#date_year_range' => '-0+1',
			 '#title' => 'Date',
			 '#default_value' => $node->start_datetime_owner,
			 '#required' => TRUE,
			 );
  $form['start_time'] = array (
			 '#type' => 'date_popup',
			 '#date_format' => 'h:ia',
			 '#date_text_parts' => array('hour', 'minute'),
			 '#field_suffix' => $timezone_suffix,
			 '#title' => 'Start Time' . $timezone_suffix,
			 '#default_value' => $node->start_datetime_owner,
			 '#required' => TRUE,
			 );
  $form['end_time'] = array (
			 '#type' => 'date_popup',
			 '#date_format' => 'h:ia',
			 '#date_text_parts' => array('hour', 'minute'),
			 '#title' => 'End Time' . $timezone_suffix,
			 '#default_value' => $node->end_datetime_owner,
			 '#required' => TRUE,
			 );
  $form['repeat_count'] = array (
				 '#type' => 'textfield',
				 '#size' => '3',
				 '#title' => 'How many weeks would you like this repeated for?',
				 '#default_value' => ($node->repeat_count ? $node->repeat_count : '1'),
				 '#field_suffix' => ' week(s)',
				 '#description' => 'If you want this time to be scheduled for more than one week, enter the number of weeks here',
				 );
  $form['hourly_rate'] = array (
				'#type' => 'textfield',
				'#size' => '4',
				'#title' => 'Hourly rate',
				'#default_value' => ($node->hourly_rate ? $node->hourly_rate : '0.00'),
				'#field_prefix' => '$',
				'#field_suffix' => '/hour',
				);
  $form['body'] = array (
			  '#type' => 'textarea',
			  '#title' => check_plain($type->body_label),
			  '#description' => 'Any notes you want to attach to this block of time',
			  '#default_value' => $node->body,
			 );


  $form['#submit'] = array('sb_schedule_submit_handler');

  return $form;
}

function sb_schedule_validate($node, &$form) {
  if ($node->hourly_rate) {
    // needs to be of the form: 00.00 or 00, with an optional initial dollar sign
    $value = sb_rate_validate($node->hourly_rate);
    if (!preg_match('/^\d+$/', $value)) {
      form_set_error("hourly_rate", "You must enter a dollar value for your hourly rate ($value)", "error");
    }
  }
}

/*
 * our submit handler; constructs the correct start/end times and our title
 */

function sb_schedule_submit_handler($form, &$form_state) {
  $user = user_load(array('uid' => $form_state['values']['uid']));

  $timezone = user_tz($user);

  $date = date_extract($form_state['values']['date_field'], "date");
  $start_date = $date . ' ' . date_extract($form_state['values']['start_time'], "time");
  $end_date = $date . ' ' . date_extract($form_state['values']['end_time'], "time");

  $start = date_make_date($start_date, $timezone);
  $end = date_make_date($end_date, $timezone);

  if (date_format($start, "U") > date_format($end, "U") ) {
    // crossed a day boundary, so end our interval on the next day
    $interval = date_interval_create_from_date_string('1 day');
    $end = date_add($end, $interval);
  }

  // get our title before we change timezones
  $form_state['values']['title'] = $user->name . ": " . date_format($start, "l g:ia") . " - " . date_format($end, "l g:ia") . " (" . date_format($start, "T") . ")";

  // convert date and times from our TZ to UTC
  date_timezone_set($start, timezone_open('UTC'));
  date_timezone_set($end, timezone_open('UTC'));

  // save them for the database
  $form_state['values']['start_datetime_utc'] = date_format($start, DATE_FORMAT_DATETIME);
  $form_state['values']['end_datetime_utc'] = date_format($end, DATE_FORMAT_DATETIME);

  $form_state['values']['rate_override'] = sb_rate_validate($form_state['values']['hourly_rate']);
}

/**
 * Implementation of hook_load()
 */

function sb_schedule_load($node) {
  $schedule_fields = db_fetch_object(db_query("SELECT owner_uid, rate_override FROM {sb_schedule} WHERE vid = %d", $node->vid));
  $block_fields = sb_schedule_block_load(array('parent_schedule_nid' => $node->nid));
  $fields = (object) array_merge((array) $schedule_fields, (array) $block_fields);
  // need to convert the date/time to various timezones
  $start = date_make_date($fields->start_datetime_utc, "UTC");
  $end = date_make_date($fields->end_datetime_utc, "UTC");

  // first convert it to the visitor's timezone
  $tz_name = user_tz();
  $start = date_timezone_set($start, timezone_open($tz_name));
  $end = date_timezone_set($end, timezone_open($tz_name));
  $fields->start_datetime_user = date_format($start, DATE_FORMAT_DATETIME);
  $fields->end_datetime_user = date_format($end, DATE_FORMAT_DATETIME);
  $fields->tz_user = date_format($start, "T");

  // then to the owner's timezone
  $owner = user_load(array('uid' => $node->uid));
  $tz_name = user_tz($owner);
  $start = date_timezone_set($start, timezone_open($tz_name));
  $end = date_timezone_set($end, timezone_open($tz_name));
  $fields->start_datetime_owner = date_format($start, DATE_FORMAT_DATETIME);
  $fields->end_datetime_owner = date_format($end, DATE_FORMAT_DATETIME);
  $fields->tz_owner = date_format($start, "T");

  return $fields;
}

/**
 * Implementation of hook_insert()
 */

function sb_schedule_insert($node) {
  global $user;

  db_query("INSERT INTO {sb_schedule}
              (nid, vid, owner_uid, rate_override)
            VALUES
              (%d, %d, %d, %d)",
	   $node->nid, $node->vid, $node->owner_uid, $node->rate_override);
  db_query("INSERT INTO {sb_schedule_block}
              (parent_schedule_nid, block_status, schedule_type, start_datetime_utc, 
               end_datetime_utc, repeat_interval, repeat_count)
            VALUES
              (%d, %d, %d, '%s', '%s', '%s', %d)",
	   $node->nid, $node->block_status, $node->schedule_type, $node->start_datetime_utc,
	   $node->end_datetime_utc, $node->repeat_interval, $node->repeat_count);
  $block_id = db_last_insert_id("sb_schedule_block", "schedule_block_id");

  // need to insert nodes for as many repeats as we have
  sb_schedule_insert_repeat_event($node, $block_id);
}


/**
 * implementation of hook_update()
 */

function sb_schedule_update($node) {
  if ($node->revision) {
    // new revision; insert it
    sb_scheduler_insert($node);
  } else {

    $original_node = node_load($node->nid);
    $str_fields = array('repeat_interval', 'start_datetime_utc', 'end_datetime_utc');
    foreach ($str_fields as $field) {
      if (! strcmp($original_node->{$field}, $node->{$field})) {
	$significant_change ++;
      }
    }
    if ($original_node->repeat_count != $node->repeat_count) {
      $significant_change ++;
    }

    db_query("UPDATE {sb_schedule} SET
                owner_uid = %d,
                rate_override = %d
              WHERE vid = %d",
	     $node->owner_uid, $node->rate_override, $node->vid);
    db_query("UPDATE {sb_schedule_block} SET
                block_status = %d,
                schedule_type = %d,
                start_datetime_utc = '%s',
                end_datetime_utc = '%s',
                repeat_interval = %d,
                repeat_count = %d
              WHERE parent_schedule_nid = %d",
	     $node->block_status, $node->schedule_type, $node->start_datetime_utc,
	     $node->end_datetime_utc, $node->repeat_interval, $node->repeat_count,
	     $node->nid);
    $block = sb_schedule_block_load (array('parent_schedule_nid' => $node->nid));
    //$block_events = sb_schedule_block_events_load ($block->schedule_block_id);

    $block_id = $block->schedule_block_id;

    // if the date,time, or repeat count changed we need to drop our blocks and recreate them
    if ($significant_change) {
      sb_schedule_delete_repeat_event($block_id);
      sb_schedule_insert_repeat_event($node, $block_id);
    }
  }
}

function sb_schedule_delete_repeat_event($id) {
  db_query("DELETE FROM {sb_schedule_block_event} WHERE parent_schedule_block_id = %d", $id);
}

function sb_schedule_insert_repeat_event ($node, $parent_id) {
  $interval = $node->repeat_interval;

  if ($interval == "week") {
    $interval = "P1W";
  } else {
    // same for now
    $interval = "P1W";
  }
  $interval = new DateInterval($interval);
  $date_start = new DateTime($node->start_datetime_utc);
  $date_end = new DateTime($node->end_datetime_utc);

  for ($i = 1; $i<= $node->repeat_count; $i++) {
    db_query("INSERT INTO {sb_schedule_block_event}
                (parent_schedule_block_id, event_status, start_datetime_utc, end_datetime_utc)
              VALUES
                (%d, %d, '%s', '%s')",
	     $parent_id, "1", date_format($date_start, DATE_FORMAT_DATETIME), date_format($date_end, DATE_FORMAT_DATETIME));
    $date_start->add($interval);
    $date_end->add($interval);
  }
}

function sb_schedule_block_load ($args) {
  $nid = $args['parent_schedule_nid'];
  $field = 'parent_schedule_nid';

  if ($nid > 0) {
    $result = db_fetch_object(db_query("SELECT * FROM {sb_schedule_block} WHERE $field = %d", $nid));
    return $result;
  } else {
    return "";
  }
}

function sb_schedule_block_event_load ($args) {
  $nid = $args['schedule_block_event_id'];
  $field = 'schedule_block_event_id';

  if ($nid > 0) {
    $result = db_fetch_object(db_query("SELECT * FROM {sb_schedule_block_event} WHERE $field = %d", $nid));
    return $result;
  } else {
    return "";
  }
}


function _schedule_decode_time_args($arg) {
  $arg = sb_decode($arg);
  $arg_array = explode("/", $arg);

  $output = array();
  $output['block_id'] = $arg_array[0];
  $output['block_event_id'] = $arg_array[1];
  $output['interval_count'] = $arg_array[2];

  $block = sb_schedule_block_event_load(array('schedule_block_event_id' => $output['block_event_id']));

  if ($block) {
    $start = $block->start_datetime_utc;
    $start = date_make_date($start, "UTC");
    $output['start_date_utc'] = clone $start;
    
    $interval = new DateInterval("PT" . 15 * $output['interval_count'] . "M");
    $date = date_add($start, $interval);
    $output['target_date_utc'] = clone $date;
    
    date_timezone_set($date, timezone_open(user_tz()));
    $output['target_date_user'] = $date;
  }

  return $output;
}

/*****************************************************************************
 *****************************************************************************
 **
 ** sb_appointment functions
 **
 *****************************************************************************
 *****************************************************************************/


function sb_appointment_form($form_state, $node) {
  $form = array();
  ahah_helper_register($form, $form_state);
  $type = node_get_types('type', $node);
  global $user;

  $_base_defaults = array ('duration' => 30,
			   'hourly_rate' => 50,
			   'appointment_type' => 1,
			   'participant_count' => 3,
			   );


  foreach ( array('duration', 'hourly_rate') as $key ) {
    if (!isset($form_state['storage']['rates'][$key])) {
      $default[$key] = ($node->$key ? $node->$key : $_base_defaults[$key]);
    } else {
      $default[$key] = $form_state['storage']['rates'][$key];
    }
  }
  foreach ( array('appointment_type', 'participant_count') as $key ) {
    if (!isset($form_state['storage']['participants'][$key])) {
      $default[$key] = ($node->$key ? $node->$key : $_base_defaults[$key]);
    } else {
      $default[$key] = $form_state['storage']['participants'][$key];
    }
  }
  // special case
  if (isset($form_state['storage']['participants']['add_more'])) {
    $default['participant_count'] = $default['participant_count'] + 3;
  }
  // students
  if ($default['appointment_type'] == 1) {
    $i = 0;
    if (isset($form_state['storage']['participants']['student_' . $i])) {
      $default['student_' . $i] = $form_state['storage']['participants']['student_' . $i];
    } else if ($node->{"student_" . $i}) {
      $default['student_' . $i] = $node->{"student_" . $i};
    }
  } else if ($default['appointment_type'] == 2) {
    for ($i = 1; $i<= 100; $i++) {
      // if we have a formstate use that; otherwise if we have a student available, use that; otherwise, nothing
      if (isset($form_state['storage']['participants']['student_' . $i])) {
	$default['student_' . $i] = $form_state['storage']['participants']['student_' . $i];
      } else if ($node->{"student_" . $i}) {
	$default['student_' . $i] = $node->{"student_" . $i};
      }
    }
  }



  /****************************************
   * Hidden
   ****************************************/

  $form['appointment_status'] = array (
				  '#type' => 'hidden',
				  '#value' => ($node->appointment_status ? $node->appointment_status : 1),
				  );
  $form['start_datetime_utc'] = array (
				       '#type' => 'hidden',
				       '#value' => $node->start_datetime_utc
				       );
  $form['appointment_id'] = array (
				   '#type' => 'hidden',
				   '#value' => ($node->appointment_id ? $node->appointment_id : ""),
				   );

  $form['repeat_interval'] = array (
				    '#type' => 'hidden',
				    '#value' => ($node->repeat_interval ? $node->repeat_interval : 'week'),
				    );

  /****************************************
   * Basic Fields
   ****************************************/

  $form['title'] = array (
			  '#type' => 'textfield',
			  '#required' => TRUE,
			  '#title' => check_plain($type->title_label),
			  '#default_value' => ($node->title ? $node->title : $form_state['storage']['title']),
			 );


  if (user_access('schedule repeating appointments')) {

    $form['repeat_count'] = array (
				     '#type' => 'textfield',
				     '#size' => '3',
				     '#title' => 'How many weeks would you like this repeated for?',
				     '#default_value' => ($node->repeat_count ? $node->repeat_count : 1),
				     '#field_suffix' => ' week(s)',
				     '#description' => 'If you want this time to be scheduled for more than one week, enter the number of weeks here',
				   );
  }



  /****************************************
   * Rates Fieldset
   ****************************************/

  $form['rates'] = array(
			 '#type' => 'fieldset',
			 '#title' => 'Rate and Duration',
			 '#description' => '<strong>Cost: $' . sprintf('%.2f', $default['hourly_rate'] * ($default['duration'] / 60)) . "</strong>",
			 '#prefix' => '<div id="rates-wrapper">',
			 '#suffix' => "</div>",
			 '#tree' => TRUE,
			 );
  $form['rates']['duration'] = array (
			     '#type' => 'radios',
			     '#options' => array ('15' => '15 Minutes', '30' => '30 Minutes', '45' => '45 Minutes', '60' => '1 hour'),
			     '#default_value' => $default['duration'],
			     '#title' => 'Select your session duration',
			     '#ahah' => array(
					      'event' => 'change',
					      'path' => ahah_helper_path(array('rates')),
					      'wrapper' => 'rates-wrapper',
					      ),
			     );
  // add this only if we're a tutor
  if (user_access('edit own tutor profile')) {
    $form['rates']['hourly_rate'] = array (
					   '#type' => 'textfield',
					   '#size' => '4',
					   '#title' => 'Hourly rate',
					   '#default_value' => $default['hourly_rate'],
					   '#field_prefix' => '$',
					   '#field_suffix' => '/hour',
					   '#ahah' => array(
							    'event' => 'change',
							    'path' => ahah_helper_path(array('rates')),
							    'wrapper' => 'rates-wrapper',
							    ),
					   );
  }
  $form['rates']['update_rate'] = array (
					     '#type' => 'submit',
					     '#value' => 'Update Duration' . (user_access('edit own tutor profile') ? ' and Rate' : ""),
					     '#submit' => array('ahah_helper_generic_submit'),
					     '#attributes' => array('class' => 'no-js'),
					     );


  /****************************************
   * Participants Fieldset
   ****************************************/

  // this is only visible if we're a tutor

  if (user_access('edit own tutor profile')) {
    
    $form['participants'] = array(
				  '#type' => 'fieldset',
				  '#title' => 'Session Participants',
				  '#prefix' => '<div id="participants-wrapper">',
				  '#suffix' => '</div>',
				  '#tree' => TRUE,
				  );
    $form['participants']['appointment_type'] = array (
						   '#type' => 'radios',
						   '#options' => array ('1' => 'Tutor Session',
									'2' => 'Group Session'),
						   '#title' => 'Type of Session',
						   '#default_value' => $default['appointment_type'],
						   '#ahah' => array(
								    'event' => 'change',
								    'path' => ahah_helper_path(array('participants')),
								    'wrapper' => 'participants-wrapper',
								    ),
						   );
    
    $form['participants']['tutor_uid'] = array (
					       '#type' => 'textfield',
					       '#title' => 'Tutor',
					       '#disabled' => TRUE,
					       '#value' => _sb_format_user($node->tutor_uid ? $node->tutor_uid : $form_state['storage']['participants']['tutor_uid']),
					       );
    
    if ($default['appointment_type'] == 1) {
      $form['participants']['student_0'] = array (
						  '#type' => 'textfield',
						  '#title' => 'Student ',
						  '#autocomplete_path' => 'user/autocomplete',
						  '#default_value' => $default['student_0'],
						  ); 
    } else if ($default['appointment_type'] == 2) {
      // this is a group session, so we want to be able to add more participants

      $form['participants']['participant_count'] = array (
						      '#type' => 'hidden',
						      '#value' => $default['participant_count'],
						      );
      
      for ($i = 1; $i <= $default['participant_count']; $i++) {
	$form['participants']['student_' . $i] = array (
							'#type' => 'textfield',
							'#title' => 'Student #' . $i,
							'#autocomplete_path' => 'user/autocomplete',
							'#default_value' => $default['student_' . $i],
							);
      }
      $form['participants']['add_more'] = array (
						 '#type' => 'submit',
						 '#value' => 'Add More Students',
						 '#ahah' => array(
								  'event' => 'change',
								  'path' => ahah_helper_path(array('participants')),
								  'wrapper' => 'participants-wrapper',
								  ),
						 );
      
    }
  }
  
  $form['body'] = array (
			 '#type' => 'textarea',
			 '#title' => check_plain($type->body_label),
			 '#description' => 'Notes will be visible to all session participants',
			 '#default_value' => $node->body,
			 );
  
  $form['submit'] = array (
			   '#type' => 'submit',
			   '#value' => 'Schedule Now',
			   );
  
  $form['#submit'] = array('sb_appointment_submit_handler');

  return $form;
}


function sb_appointment_validate($node, &$form) {
  if ($node->hourly_rate) {
    // needs to be of the form: 00.00 or 00, with an optional initial dollar sign
    $value = sb_rate_validate($node->hourly_rate);
    if (!preg_match('/^\d+$/', $value)) {
      form_set_error("hourly_rate", "You must enter a dollar value for the hourly rate ($value)", "error");
    }
  }
  if ($node->duration <= 0) {
    form_set_error("duration", "Duration must be between 15 and 60");
  }

  // FIXME - -need to validate that all names are real accounts
}

/*
 * our submit handler; constructs the correct start/end times and our title
 */

function sb_appointment_submit_handler($form, &$form_state) {
  $start_date = date_make_date($form_state['values']['start_datetime_utc'], 'UTC');
  $form_state['values']['start_datetime_utc'] = date_format($start_date, DATE_FORMAT_DATETIME);

  $interval = new DateInterval('PT' . $form_state['values']['rates']['duration'] . 'M');
  $end_date = date_add($start_date, $interval);
  $form_state['values']['end_datetime_utc'] = date_format($end_date, DATE_FORMAT_DATETIME);
  
  $form_state['values']['duration'] = $form_state['values']['rates']['duration'];
  $form_state['values']['rate_override'] = sb_rate_validate($form_state['values']['rates']['hourly_rate']);
  $form_state['values']['appointment_type'] = $form_state['values']['participants']['appointment_type'];
  $form_state['values']['participant_count'] = $form_state['values']['participants']['participant_count'];

  // record the tutor properly
  $u = user_load(array('name' => $form_state['values']['participants']['tutor_uid']));
  $form_state['values']['tutor_uid'] = $u->uid;

  // create an array of our non-tutor participants
  if ($form_state['values']['appointment_type'] == 1) {
    // just one participant
    $u = user_load(array('name' => $form_state['values']['participants']['student_0']));
    if ($u) {
      $form_state['values']['student_uids'][] = $u->uid;
    }
  } else {
    for ($i = 1; $i <= $form_state['values']['participants']['participant_count']; $i++) {
      $u = user_load(array('name' => $form_state['values']['participants']['student_' . $i]));
      if ($u) {
	$form_state['values']['student_uids'][] = $u->uid;
      }
    }
  }

  // insert if needed, otherwise update
  if ($form_state['values']['appointment_id'] > 0) {
    // update
    sb_appointment_update( (object) $form_state['values']);
  } else {
    // insert
    sb_appointment_insert( (object) $form_state['values']);
  }
}


/**
 * Implementation of hook_insert()
 */

function sb_appointment_insert($node) {
  global $user;

  db_query("INSERT INTO {sb_appointment}
              (title, body, tutor_uid, appointment_status, appointment_type, start_datetime_utc, 
               end_datetime_utc, duration, repeat_interval, repeat_count, rate_override)
            VALUES
              ('%s', '%s', %d, %d, %d, '%s', '%s', '%d', '%s', %d, %d)",
	   $node->title, $node->body, $node->tutor_uid, $node->appointment_status, $node->appointment_type, $node->start_datetime_utc,
	   $node->end_datetime_utc, $node->duration, $node->repeat_interval, $node->repeat_count, $node->rate_override);
  $appointment_id = db_last_insert_id("sb_appointment", "appointment_id");

  // need to insert nodes for as many repeats as we have
  sb_appointment_insert_repeat_event($node, $appointment_id);
  sb_appointment_insert_participants($node, $appointment_id);
}


/**
 * implementation of hook_update()
 */

function sb_appointment_update($node) {
  $original_node = sb_appointment_load($node->appointment_id);
  $str_fields = array('repeat_interval', 'start_datetime_utc', 'end_datetime_utc');
  foreach ($str_fields as $field) {
    if (! strcmp($original_node->{$field}, $node->{$field})) {
      $significant_change ++;
    }
  }
  if ($original_node->repeat_count != $node->repeat_count) {
    $significant_change ++;
  }
  
  db_query("UPDATE {sb_appointment} SET
                title = '%s',
                body = '%s',
                tutor_uid = %d,
                appointment_status = %d,
                appointment_type = %d,
                start_datetime_utc = '%s',
                end_datetime_utc = '%s',
                duration = %d,
                repeat_interval = %d,
                repeat_count = %d,
                rate_override = %d
              WHERE appointment_id = %d",
	   $node->title, $node->body, $node->tutor_uid, $node->appointment_status, $node->appointment_type, $node->start_datetime_utc,
	   $node->end_datetime_utc, $node->duration, $node->repeat_interval, $node->repeat_count, $node->rate_override,
	   $node->appointment_id);
  
  // if the date,time, or repeat count changed we need to drop our blocks and recreate them
  if ($significant_change) {
    sb_schedule_delete_repeat_event($node->appointment_id);
    sb_schedule_insert_repeat_event($node, $node->appointment_id);
  }
  sb_appointment_delete_participants($node->appointment_id);
  sb_appointment_insert_participants($node, $node->appointment_id);
}


function sb_appointment_delete_repeat_event($id) {
  db_query("DELETE FROM {sb_appointment_event} WHERE parent_appointment_id = %d", $id);
}

function sb_appointment_insert_repeat_event ($node, $parent_id) {
  $interval = $node->repeat_interval;

  if ($interval == "week") {
    $interval = "P1W";
  } else {
    // same for now
    $interval = "P1W";
  }
  $interval = new DateInterval($interval);
  $date_start = new DateTime($node->start_datetime_utc);
  $date_end = new DateTime($node->end_datetime_utc);

  for ($i = 1; $i<= $node->repeat_count; $i++) {
    db_query("INSERT INTO {sb_appointment_event}
                (parent_appointment_id, event_status, start_datetime_utc, end_datetime_utc)
              VALUES
                (%d, %d, '%s', '%s')",
	     $parent_id, "1", date_format($date_start, DATE_FORMAT_DATETIME), date_format($date_end, DATE_FORMAT_DATETIME));
    $date_start->add($interval);
    $date_end->add($interval);
  }
}

function sb_appointment_delete_participants($id) {
  db_query("DELETE FROM {sb_appointment_event} WHERE appointment_id = %d", $id);
}

function sb_appointment_insert_participants($node, $appointment_id) {
  $ids = $node->student_uids;
  foreach ($ids as $id) {
    if ($id > 0) {
      db_query("INSERT INTO {sb_appointment_participants}
                   (appointment_id, participant_uid)
                VALUES
                   (%d, %d)",
	       $appointment_id, $id);
    }
  }
}

function sb_appointment_load ($id) {
  if ($id > 0) {
    $result = db_fetch_object(db_query("SELECT * FROM {sb_appointment} WHERE appointment_id = %d", $id));
    $participants = sb_appointment_participants_load($id);
    // if we are a single-tutor session, store it in zero; otherwise store starting with 1
    if ($result->appointment_type == 1) {
      $u = user_load($participants[0]);
      $result->student_0 = $u->name;
      $result->student_uid_0 = $u->uid;
    } else {
      for ($i = 1; $i <= count($participants); $i++) {
	$u = user_load($participants[$i-1]);
	$result->{"student_" . $i} = $u->name;
	$result->{"student_uid_" . $i} = $u->uid;
      }
    }
    return $result;
  } else {
    return "";
  }
}

function sb_appointment_participants_load($id) {
  if ($id > 0) {
    $result = db_query("SELECT * FROM {sb_appointment_participants} WHERE appointment_id = %d ORDER BY participant_uid", $id);

    $items = array();
    while ($obj = db_fetch_object($result)) {
      $items[] = $obj->participant_uid;
    }
    return $items;
  } else {
    return "";
  }
}

function sb_appointment_event_load ($args) {
  $nid = $args['appointment_event_id'];
  $field = 'appointment_event_id';

  if ($nid > 0) {
    $result = db_fetch_object(db_query("SELECT * FROM {sb_appointment_event} WHERE $field = %d", $nid));
    return $result;
  } else {
    return "";
  }
}




/*****************************************************************************
 *****************************************************************************
 **
 ** Helper functions
 **
 *****************************************************************************
 *****************************************************************************/

function _sb_format_user($uid) {
  $user = user_load($uid);
  if ($user) {
    return $user->name;
  } else {
    return "";
  }
}

function user_tz($user = "") {
  if (!$user) {
    global $user;
  }
  if (variable_get('configurable_timezones', 1) && $user->uid && strlen($user->timezone)) {
    return $user->timezone_name;
  } else {
    return variable_get('date_default_timezone_name', 0);
  }
}

function date_extract($iso, $part) {
  $a = explode(' ', $iso);
  if ($part == "date") {
    return $a[0];
  } else {
    return $a[1];
  }
}

function sb_rate_validate($rate) {
  // if we have a dollar sign, remove it
  $rate = str_replace('$', '', $rate);
  // remove a decimal point
  // if we don't have a decimal point, add two zeros at the end.  if we do, remove it
  $pos = strpos($rate, '.');
  if ($pos === false) {
    $rate .= "00";
  } else {
    if ( strlen($rate) == ($pos + 2) ) { // we have a xx.x number
      $rate .= "0";
    } else if (strlen($rate) > ($pos + 3)) { // too many decimals
      return "asdf";
    }
    $rate = str_replace('.', '', $rate);
  }
  // return it
  return $rate;
}

/**
 * Implementation of hook_form_alter
 *
 * Hide most dropdowns on the node forms on the whole site
 */

function sb_scheduler_form_alter(&$form, &$form_state, $form_id) {

  if (! user_access('view hidden node fields') ) {
    // Revision information
    $form['revision_information']['#attributes'] = array('class' => 'hideme');
    // Publishing options
    $form['options']['#attributes'] = array('class' => 'hideme'); 
    // XML sitemap
    $form['xmlsitemap']['#attributes'] = array('class' => 'hideme');
    // Printer, e-mail and PDF versions
    $form['print']['#attributes'] = array('class' => 'hideme');
    // URL path settings
    $form['path']['#attributes'] = array('class' => 'hideme');
    // Menu settings
    $form['menu']['#attributes'] = array('class' => 'hideme');
    // Comment settings
    $form['comment_settings']['#attributes'] = array ('class' => 'hideme');
  }

  // change the "Authoring information" permission.
  $form['author']['#access'] = user_access('change authoring information');
  $form['author']['#description'] = '<div class="messages warning">' . t('Change this information with discretion; it will have many ramifications elsewhere on this site.') .'</div>';
}




function sb_encode($url) {
  return preg_replace(array('/\+/', '/\//'), array('-', '_'), base64_encode($url));
}

function sb_decode($url_encoded) {
  return base64_decode(preg_replace(array('/-/', '/_/'), array('+', '/'), $url_encoded));
}


