<?php

/**
 * Implementation of hook_perm()
 */

function sb_billing_perm() {
  return array (
	       'edit billing levels',
		);
}
/**
 * Implementation of hook_menu()
 */

function sb_billing_menu() {
  /**
   * Billing Levels
   */

  $items['eto/admin/billing-levels'] = array (
				      'title' => 'Billing Levels',
				      'page callback' => 'sb_billing_levels',
				      'access arguments' => array ('edit billing levels'),
				      'file' => 'levels.pages.inc',
				      'type' => MENU_NORMAL_ITEM,
				      );
  $items['eto/admin/billing-levels/add'] = array (
						'title' => 'Add a New Billing Level',
						'page callback' => 'sb_billing_level_edit',
						'access arguments' => array ('edit billing levels'),
						'file' => 'levels.pages.inc',
						'type' => MENU_NORMAL_ITEM,
						);
  $items['eto/admin/billing-levels/%'] = array (
						'title' => 'View Billing Level',
						'page callback' => 'sb_billing_level_view',
						'page arguments' => array(3),
						'access arguments' => array ('edit billing levels'),
						'file' => 'levels.pages.inc',
						'type' => MENU_CALLBACK,
						);
  $items['eto/admin/billing-levels/%/edit'] = array (
						'title' => 'Edit Billing Level',
						'page callback' => 'sb_billing_level_edit',
						'page arguments' => array(3),
						'access arguments' => array ('edit billing levels'),
						'file' => 'levels.pages.inc',
						'type' => MENU_CALLBACK,
						);
  $items['eto/admin/billing-levels/%/add-tutor'] = array (
						'title' => 'Add Tutor to Billing Level',
						'page callback' => 'sb_billing_level_add_tutor',
						'page arguments' => array(3),
						'access arguments' => array ('edit billing levels'),
						'file' => 'levels.pages.inc',
						'type' => MENU_CALLBACK,
						);
  $items['users/%/billing-level/edit'] = array (
						'title' => 'Edit Tutor Billing Level',
						'page callback' => 'sb_billing_level_edit_tutor',
						'page arguments' => array(1),
						'access arguments' => array ('edit billing levels'),
						'file' => 'levels.pages.inc',
						'type' => MENU_CALLBACK,
						);


  return $items;

}


/*
 * Implementation of hook_theme()
 */

function sb_billing_theme() {
  $themes = array();

  $themes['sb_rate'] = array ('arguments' => array ('rate' => NULL, "prefix" => NULL) );

  $themes['tutor_level_row'] = array ('arguments' => array('level' => NULL) );

  return $themes;
}

function theme_sb_rate ($rate, $prefix = "") {
  return $prefix . number_format(($rate / 100), 2);
}

function theme_tutor_level_row ($level) {
  return array (
		l("[edit]", billing_level_url("", $level->level_id, "edit")) . "<BR>"
		. l("[add tutor]", billing_level_url("", $level->level_id, "add-tutor")),
		
		l($level->title, billing_level_url("", $level->level_id, "edit")),
		theme('sb_rate', $level->school_day_hours_rate, "$") . "<br>" . $level->school_day_hours_label,
		theme('sb_rate', $level->school_after_hours_rate, "$") . "<br>" . $level->school_after_hours_label,
		theme('sb_rate', $level->summer_day_hours_rate, "$") . "<br>" . $level->summer_day_hours_label,
		theme('sb_rate', $level->summer_after_hours_rate, "$") . "<br>" . $level->summer_after_hours_label,
		( (count($level->tutors) > 0) 
		  ? count($level->tutors) . " " . l("[view]", billing_level_url("", $level->level_id))
		  : 0)
		);

}

function tutor_level_row_header ($sortable = 1) {
  if ($sortable) {
    return array (
		  '',
		  array('data' => 'Title', 'field' => 'title', 'sort' => 'asc'),
		  array('data' => 'Day Rate<br>(School)', 'field' => 'school_day_hours_rate'),
		  array('data' => 'After Rate<br>(School)', 'field' => 'school_after_hours_rate'),
		  array('data' => 'Day Rate<br>(Summer)', 'field' => 'summer_day_hours_rate'),
		  array('data' => 'After Rate<br>(Summer)', 'field' => 'summer_after_hours_rate'),
		  'Tutors',
		  );
  } else {
    return array (
		  '',
		  'Title',
		  'Day Rate<br>(School)',
		  'After Rate<br>(School)',
		  'Day Rate<br>(Summer)',
		  'After Rate<br>(Summer)',
		  'Tutors',
		  );
  }
}

/****************************************************************************************
 ****************************************************************************************
 **
 ** Load functions
 **
 ****************************************************************************************
 ****************************************************************************************/


function sb_billing_level_load ($id) {
  $node = db_fetch_object(db_query("SELECT * FROM {sb_billing_level} WHERE level_id = %d",
				  $id));
  $result = db_query("SELECT * FROM {sb_billing_tutor_level} WHERE level_id = %d",
		     $id);
  while ($obj = db_fetch_object($result)) {
    $node->tutors[] = $obj;
  }
  return $node;
}

function sb_billing_tutor_level_load($uid) {
  return db_fetch_object(db_query("SELECT * FROM {sb_billing_tutor_level} 
                                   WHERE uid = %d",
				  $uid));
}



/****************************************************************************************
 ****************************************************************************************
 **
 ** Helper functions
 **
 ****************************************************************************************
 ****************************************************************************************/

function user_billing_level_block ($user) {
  $tutor_level = sb_billing_tutor_level_load($user->uid);
  $level = sb_billing_level_load($tutor_level->level_id);

  $output = "<h2>Billing Level</h2>";
  $edit_url = "users/" . $user->name . "/billing-level/edit";
  if (!$tutor_level) {
    $output .= "<p>This user has no billing level set yet.  " . l("Click here to set a billing level.", $edit_url) . "</p>";
  } else {
    $output .= "Level: " . $level->title . "<br>";
    $output .= "Split: " . $tutor_level->split . "%<br>";
    $output .= l("Click here to edit this tutor's billing level.", $edit_url);
  }
  return $output;
  
}

function sb_get_hourly_rate ($tutor, $date, $duration = "", $label = FALSE) {
  $tutor_level = sb_billing_tutor_level_load($tutor);
  $level = sb_billing_level_load($tutor_level->level_id);

  // need to convert our start/end to the tutor's time to find out which rate applies
  $start = date_make_date($date, 'UTC');
  date_timezone_set($start, timezone_open(user_tz($tutor)));

  $start_time = date_format($start, "H:i:s");
  $start_date = date_format($start, "Y-m-d");

  $year = date_format($start, "Y"); // can use either, this is just used for "is it summer"

  $interval = new DateInterval("PT" . $duration . "M");
  $end = date_make_date($date, 'UTC');
  $end->add($interval);
  date_timezone_set($end, timezone_open(user_tz($tutor)));
  $end_time = date_format($end, "H:i:s");
  $end_date = date_format($end, "Y-m-d");

  // now construct the appropriate dates
  $day_start = $start_date . " " . variable_get('eto_billing_daytime_start', "09:00:00");
  $day_start = date_make_date($day_start, user_tz($tutor));
  $day_end = $end_date . " " . variable_get('eto_billing_daytime_end', "15:00:00");
  $day_end = date_make_date($day_end, user_tz($tutor));

  $summer_start = $year . "-" . variable_get('eto_billing_summer_start', "06-01") . " 00:00:00";
  $summer_start = date_make_date($summer_start, user_tz($tutor));
  $summer_end = $year . "-" . variable_get('eto_billing_summer_end', "09-01") . " 23:59:59";
  $summer_end = date_make_date($summer_end, user_tz($tutor));

  //
  // fast and dirty comparisons!  We can do this because "daytime" does not wrap past hour 23 and we only have two intervals
  //
  // we'll make a list of all possible rates, then pick the highest
  //
  // the "or equal to" part of the comparisons isn't random; it's deliberate
  //
  if ( (_qf_time($start) >= _qf_time($day_start)) && (_qf_time($start) < _qf_time($day_end)) ) {
    // inside our 'daytime' interval, so add that
    $daytime = 1;
  } else {
    $after = 1;
  }
  if ( (_qf_time($end) > _qf_time($day_start)) && (_qf_time($end) <= _qf_time($day_end)) ) {
    // inside our 'daytime' interval, so add that
    $daytime = 1;
  } else {
    $after = 1;
  }
  if ( (_qf_date($start) >= _qf_date($summer_start)) && (_qf_date($start) <= _qf_date($summer_end))) {
    // inside our "summer" interval
    $summer = 1;
  }  else {
    $schoolyear = 1;
  }
  if ( (_qf_date($end) >= _qf_date($summer_start)) && (_qf_date($end) <= _qf_date($summer_end))) {
    // inside our "summer" interval
    $summer = 1;
  } else {
    $schoolyear = 1;
  }

  // now check the combination of variables we set to figure out what are possible rates
  $rates = array();
  $labels = array();
  $i = 0;
  if ($schoolyear) {
    if ($daytime) {
      $rates[$i] = $level->school_day_hours_rate;
      $labels[$i] = $level->school_day_hours_label;
      $i++;
    }
    if ($after) {
      $rates[$i] = $level->school_after_hours_rate;
      $labels[$i] = $level->school_after_hours_label;
      $i++;
    }
  } else if ($summer) {
    if ($daytime) {
      $rates[$i] = $level->summer_day_hours_rate;
      $labels[$i] = $level->summer_day_hours_label;
      $i++;
    }
    if ($after) {
      $rates[$i] = $level->summer_after_hours_rate;
      $labels[$i] = $level->summer_after_hours_label;
      $i++;
    }
  }

  //
  // return the higher of the two
  //
  if ($rates[0] > $rates[1]) {
    return ($label ? $labels[0] : $rates[0]);
  } else {
    return ($label ? $labels[1] : $rates[1]);
  }
}

function sb_billing_level_array() {
  $rows = array();

  if ($option) {
    $rows[0] = $option;
  }

  $result = db_query("SELECT * FROM {sb_billing_level} WHERE status_flag = 1 ORDER BY title");

  while ($level = db_fetch_object($result)) {
    $rows[$level->level_id] = $level->title;
  }
  return $rows;
}


function billing_level_url ($base = "", $id = "", $action = "", $tutor_id = "") {
  if ($tutor_id) {
    // different interface
    $user = eto_user_load($tutor_id);
    return "users/" . $user->name . "/billing-level"
      . ($action ? "/" . $action : "");
  } else {
    return $base . "eto/admin/billing-levels" 
      . ($id  ? "/" . $id : "")
      . ($action ? "/" . $action : "")
      . ($tutor_id ? "/" . $tutor_id : "" );
  }
}